<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Polynom interpolation</title>
        <!--<script type="text/x-mathjax-config">
          MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
        </script>
        <script type="text/javascript"
          src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
        </script>-->
        <!-- Piwik -->
        <script type="text/javascript">
          var _paq = _paq || [];
          _paq.push(['trackPageView']);
          _paq.push(['enableLinkTracking']);
          (function() {
            var u=(("https:" == document.location.protocol) ? "https" : "http") + "://martin-thoma.com/piwik//";
            _paq.push(['setTrackerUrl', u+'piwik.php']);
            _paq.push(['setSiteId', 1]);
            var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0]; g.type='text/javascript';
            g.defer=true; g.async=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
          })();
        </script>
        <!-- End Piwik Code -->
        <style type="text/css">
            span.hint {
	            border-bottom:1px dotted #666;
            }
        </style>
    </head>
    <body>
        <p><span id="polynomial">$p(x) = x^2$</span></p>
        <canvas id = "myCanvas"
                width = "512" height = "600" 
                style = "border:1px solid #000;"
        > </canvas>
        <textarea id="pointlist" style="width:256px"></textarea>    
        <p>Remove points with Ctrl+click.</p>

    <script type="text/javascript">
        function setCursorByID(id,cursorStyle) {
            var elem;
            if (document.getElementById &&
            (elem=document.getElementById(id)) ) {
                if (elem.style) elem.style.cursor=cursorStyle;
            }
        }
        

        /* calculate coordinates */
        function c(x,isX) {
            if(isX) {
                return STRETCH_X*(x+X_OFFSET);    
            } else {
                return STRETCH_Y*(-x+Y_OFFSET);
            }
        }

        /* calculate coordinates - reversed */
        function r(x,isX) {
            if(isX) {
                return x/STRETCH_X-X_OFFSET;
            } else {
                return -x/STRETCH_Y+Y_OFFSET;
            }
        }

        function drawBoard(canvas) {
            var context = canvas.getContext('2d');
            // make canvas as big as possible
            context.canvas.width  = window.innerWidth - 50;
            context.canvas.height = window.innerHeight - 120;
            context.clearRect(0, 0, canvas.width, canvas.height);

            // Adjust general settings to canvas size
            X_OFFSET = context.canvas.width/(STRETCH_X*2);
            Y_OFFSET = context.canvas.height/(STRETCH_Y*2);

            // x-axis
            context.beginPath();
            context.moveTo(c(X_MIN,true),c(0,false));
            context.lineTo(c(X_MAX,true),c(0,false));
            context.closePath();
            context.stroke();

            // y-axis
            context.beginPath();
            context.moveTo(c(0,true),c(Y_MIN));
            context.lineTo(c(0,true),c(Y_MAX));
            context.closePath();
            context.stroke();

            // x-ticks
            for (var x=X_MIN;x<X_MAX;x++){
                if (x % 10 == 0) {
                    context.beginPath();
                    context.moveTo(c(x,true),c(-2));
                    context.lineTo(c(x,true),c(2));
                    context.closePath();
                    context.stroke();
                }
            }

            // y-ticks
            for (var y=Y_MIN;y<Y_MAX;y++){
                if (y % 10 == 0) {
                    context.beginPath();
                    context.moveTo(c(-2,true), c(y,false));
                    context.lineTo(c(+2,true), c(y,false));
                    context.closePath();
                    context.stroke();
                }
            }

            // arrow x
            context.beginPath();
            context.moveTo(c(X_MAX-5,true), c(-7,false));
            context.lineTo(c(X_MAX,true), c(0,false));
            context.lineTo(c(X_MAX-5,true), c(+7,false));
            context.stroke();

            // arrow y
            context.beginPath();
            context.moveTo(c(-7,true), c(Y_MAX-5));
            context.lineTo(c(+0,true), c(Y_MAX));
            context.lineTo(c(+7,true), c(Y_MAX-5));
            context.stroke();

            drawPoints(canvas);
            writePointList();
            polynomial = {};
            for (var power=0;power<points.length;power++) {
                polynomial[power] = 0;
            }

            // calculate coefficients for monom
            var A = setGauss(points);
            var x = gauss(A);
            console.log(x);

            for (var power=0;power<points.length;power++) {
                polynomial[power] = x[power];
            }

            drawPolynomial(canvas, polynomial);
        }

        function setGauss(points) {
            var n = points.length - 1;
            var A = new Array(n+1);
            for (var i = 0; i < n+1; i++) {
                A[i] = new Array(n+2);
                x = points[i]["x"];
                for (var j=0; j < n+1; j++) {
                    A[i][j] = Math.pow(x,j);
                }
                A[i][n+1] = points[i]["y"];
            }
            return A;
        }

        /** Solve a linear system of equations given by a n×n matrix 
            with a result vector n×1. */
        function gauss(A) {
            var n = A.length;

            for (var i=0; i<n; i++) {
                // Search for maximum in this column
                var maxEl = Math.abs(A[i][i]);
                var maxRow = i;
                for(var k=i+1; k<n; k++) {
                    if (Math.abs(A[k][i]) > maxEl) {
                        maxEl = Math.abs(A[k][i]);
                        maxRow = k;
                    }
                }

                // Swap maximum row with current row (column by column)
                for (var k=i; k<n+1; k++) {
                    var tmp = A[maxRow][k];
                    A[maxRow][k] = A[i][k];
                    A[i][k] = tmp;
                }

                // Make all rows below this one 0 in current column
                for (k=i+1; k<n; k++) {
                    var c = -A[k][i]/A[i][i];
                    for(var j=i; j<n+1; j++) {
                        if (i==j) {
                            A[k][j] = 0;
                        } else {
                            A[k][j] += c * A[i][j];
                        }
                    }
                }
            }

            // Solve equation Ax=b for an upper triangular matrix A
            var x= new Array(n);
            for (var i=n-1; i>-1; i--) {
                x[i] = A[i][n]/A[i][i];
                for (var k=i-1; k>-1; k--) {
                    A[k][n] -= A[k][i] * x[i];
                }
            }
            return x;
        }


        function drawPolynomial(canvas, polynomial) {
            var context = canvas.getContext('2d');
            context.beginPath();
            context.strokeStyle = 'blue';
            for (var x=X_MIN;x<X_MAX;x++){
                var y=0;
                for (var power in polynomial) {
                    y += polynomial[power] * Math.pow(x,power);
                }
                if (x==X_MIN) {
                    context.moveTo(c(x,true),c(y,false));
                } else {
                    context.lineTo(c(x,true),c(y,false));
                }
            }
            //context.closePath();
            context.stroke();

            // Write polynomial to document
            var mathEl = document.getElementById("polynomial");
            mathEl.innerHTML = '$p(x) = ';
            for (var power in polynomial) {
                if (polynomial[power] != 0) {
                    if (polynomial[power] == 1) {
                        mathEl.innerHTML += '+x^' + power + ' ';
                    } else {
                        mathEl.innerHTML += '+' + polynomial[power] + 'x^' + power + ' ';
                    }
                }
            }
            mathEl.innerHTML+= '$';
        }

        function euklideanDist(p1, p2) {
            return Math.sqrt(
                          Math.pow(p1["x"]-p2["x"], 2) 
                        + Math.pow(p1["y"]-p2["y"], 2));
        }

        /** add or remove a point */
        function addPoint(event, canvas, mouseCoords, radius) {
            if(event.ctrlKey)  {
                // remove point that is nearest to mouse coords
                if (points.length >= 1) {
                    nearestMouseCIndex = 0;
                    nearestDist = euklideanDist(mouseCoords, points[0]);
                    var mCoords = {"x": r(parseInt(mouseCoords["x"]), true), "y": r(parseInt(mouseCoords["y"]), false)};
                    for(var i = 1; i < points.length; i++) {
                        var tmpDist = euklideanDist(mCoords, points[i]);
                        if (tmpDist < nearestDist) {
                            nearestDist = tmpDist;
                            nearestMouseCIndex = i;
                        }
                    }
                    points.splice(nearestMouseCIndex,1);
                }
            } else {
                points.push({"x": r(parseInt(mouseCoords["x"]), true),
                         "y": r(parseInt(mouseCoords["y"]), false)});
            }
        }

        /** draw all permanently added points */
        function drawPoints(canvas) {
            for(var i = 0; i < points.length; i++) {
                context.beginPath();
                context.arc(c(points[i]["x"],true), 
                            c(points[i]["y"],false), 
                            2, /*radius*/
                            0, 2 * Math.PI, false);
                context.lineWidth = 1;
                context.strokeStyle = 'black';
                context.fillStyle = "rgb(0,0,0)";
                context.fill();
                context.stroke();
            }
        }

        function writePointList() {
            var tArea = document.getElementById("pointlist");
            tArea.value = '';
            for(var i = 0; i < points.length; i++) {
                tArea.value += "(" + points[i]["x"] + "|" + points[i]["y"] + "), ";
            }
        }
      
        /** get the current position of the mouse */
        function getMouseCoords(canvas, evt) {
            var rect = canvas.getBoundingClientRect();
            return {
                "x": evt.clientX - rect.left,
                "y": evt.clientY - rect.top
            };
        }
      
        /** global variables */
        var STRETCH_X = 3;
        var STRETCH_Y = 3;
        var X_MIN = -150;
        var X_MAX = +150;
        var Y_MIN = -80;
        var Y_MAX = +80;
        var X_OFFSET = 256;
        var Y_OFFSET = 100;
        var points = new Array();
        var canvas = document.getElementById("myCanvas");
        var context = canvas.getContext("2d");
        drawBoard(canvas, {"x":0,"y":0}, 10);
        setCursorByID("myCanvas", "crosshair");

        /** event listeners */
        canvas.addEventListener('mousemove', 
            function(evt) {
                var mouseCoords = getMouseCoords(canvas, evt);
                drawBoard(canvas, mouseCoords, 10);
            }, false);

        canvas.addEventListener("mousedown", 
            function(event) {
                var mouseCoords = getMouseCoords(canvas, event);
                addPoint(event, canvas, mouseCoords, 10);
            }, false);
    </script>
</body>
</html>
