#!/usr/bin/env python

"""
Tools for the HASY dataset.

Type `./hasy_tools.py --help` for the command line tools and `help(hasy_tools)`
in the interactive Python shell for the module options of hasy_tools.
"""

import logging
import csv
import os
import random
from PIL import Image, ImageDraw
import sys

from six.moves import cPickle as pickle
import numpy
import scipy.ndimage

logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s',
                    level=logging.INFO,
                    stream=sys.stdout)

__version__ = "v1.0"


def _load_csv(filepath, delimiter=',', quotechar="'"):
    """
    Load a CSV file.

    Parameters
    ----------
    filepath : str
        Path to a CSV file
    delimiter : str, optional
    quotechar : str, optional

    Returns
    -------
    list of dicts : Each line of the CSV file is one element of the list.
    """
    data = []
    with open(filepath, 'rb') as csvfile:
        reader = csv.DictReader(csvfile,
                                delimiter=delimiter,
                                quotechar=quotechar)
        for row in reader:
            data.append(row)
    return data


def generate_index(dataset_path):
    """
    Generate an index 0...k for the k labels.

    Parameters
    ----------
    dataset_path : str
        Path to the main directory HASYv1 which contains hasy-test-labels.csv

    Returns
    -------
    dict : Maps a symbol_id as in hasy-test-labels.csv and
        hasy-train-labels.csv to an integer in 0...k, where k is the total
        number of unique labels.
    """
    symbol_id2index = {}
    data = _load_csv(os.path.join(dataset_path, 'hasy-test-labels.csv'))
    i = 0
    for item in data:
        if item['symbol_id'] not in symbol_id2index:
            symbol_id2index[item['symbol_id']] = i
            i += 1
    return symbol_id2index


def load_images(dataset_path, csv_file_path, symbol_id2index):
    """
    Load the images into a 4D uint8 numpy array [index, y, x, depth].

    This also pickles the loaded and parsed data to improve the speed of
    subsequent runs.

    Parameters
    ----------
    dataset_path : str
        The path to the main directory HASY_v1
    csv_file_path : str
        'hasy-test-labels.csv' or 'hasy-train-labels.csv'
    symbol_id2index : dict
        Dictionary generated by generate_index

    Returns
    -------
    images, labels : Images is a 4D uint8 numpy array [index, y, x, depth]
                     and labels is a 2D uint8 numpy array [index][1-hot enc].
    """
    WIDTH, HEIGHT = 32, 32
    csv_filepath = os.path.join(dataset_path, csv_file_path)
    pickle_filepath = csv_filepath + ".pickle"
    if os.path.isfile(pickle_filepath):
        with open(pickle_filepath, 'rb') as handle:
            data = pickle.load(handle)
    else:
        data = _load_csv(csv_filepath)
        images = numpy.zeros((len(data), WIDTH, HEIGHT, 1))
        labels = []
        for i, data_item in enumerate(data):
            fname = os.path.join(dataset_path, data_item['path'])
            # img = scipy.ndimage.imread(fname, flatten=False, mode='L')
            # img = img.reshape((1, img.shape[0], img.shape[1], 1))
            images[i, :, :, 0] = scipy.ndimage.imread(fname,
                                                      flatten=False,
                                                      mode='L')
            # for y in range(WIDTH):
            #     for x in range(HEIGHT):
            #         images[i][y][x][0] = img[0][y][x][0]
            label = symbol_id2index[data_item['symbol_id']]
            labels.append(label)
        # Pickle it to speed up later runs
        data = images, numpy.array(labels)
        with open(pickle_filepath, 'wb') as handle:
            pickle.dump(data, handle, protocol=pickle.HIGHEST_PROTOCOL)
    data = (data[0], numpy.eye(len(symbol_id2index))[data[1]])
    return data


def _is_valid_png(filepath):
    """
    Check if the PNG image is valid.

    Parameters
    ----------
    filepath : str
        Path to a PNG image

    Returns
    -------
    bool : True if the PNG image is valid, otherwise False
    """
    try:
        test = Image.open(filepath)
        test.close()
        return True
    except:
        return False


def _verify_all():
    """Verify all PNG files in the training and test directories."""
    for csv_data_path in ['hasy-test-labels.csv', 'hasy-train-labels.csv']:
        train_data = _load_csv(csv_data_path)
        for data_item in train_data:
            if not _is_valid_png(data_item['path']):
                logging.info("%s is invalid." % data_item['path'])
        logging.info("Checked %i items of %s." %
                     (len(train_data), csv_data_path))


def create_random_overview(img_src, x_images, y_images):
    """Create a random overview of images."""
    # Create canvas
    background = Image.new('RGB',
                           (35 * x_images, 35 * y_images),
                           (255, 255, 255))
    bg_w, bg_h = background.size
    # Paste image on canvas
    for x in range(x_images):
        for y in range(y_images):
            path = random.choice(img_src)['path']
            img = Image.open(path, 'r')
            img_w, img_h = img.size
            offset = (35 * x, 35 * y)
            background.paste(img, offset)
    # Draw lines
    draw = ImageDraw.Draw(background)
    for y in range(y_images):  # horizontal lines
        draw.line((0, 35 * y - 2, 35 * x_images, 35 * y - 2), fill=0)
    for x in range(x_images):  # vertical lines
        draw.line((35 * x - 2, 0, 35 * x - 2, 35 * y_images), fill=0)
    # Store
    background.save('hasy-overview.png')


def _get_parser():
    """Get parser object for hasy_tools.py."""
    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
    parser = ArgumentParser(description=__doc__,
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument("--verify",
                        dest="verify",
                        action="store_true",
                        default=False,
                        help="verify PNG files")
    parser.add_argument("--overview",
                        dest="overview",
                        action="store_true",
                        default=False,
                        help="Get overview of data")
    return parser


if __name__ == "__main__":
    args = _get_parser().parse_args()
    if args.verify:
        _verify_all()
    if args.overview:
        img_src = _load_csv('hasy-train-labels.csv')
        create_random_overview(img_src, x_images=10, y_images=10)
